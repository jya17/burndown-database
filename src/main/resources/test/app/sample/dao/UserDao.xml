<?xml version="1.0" encoding="UTF-8"?> 
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="test.app.sample.dao.UserDao">

    <resultMap id="UserMapper" type="test.app.sample.domain.User">
        <result column ="KEY"                 property = "key" />
        <result column ="USERNAME"            property = "username" />
        <result column ="PASSWORD"            property = "password" />
        <result column ="FIRST_NAME"          property = "firstName" />
        <result column ="LAST_NAME"           property = "lastName" />
        <result column ="EMAIL"               property = "email" />
        <result column ="PROJECT_ID"          property = "projectId" />
        <result column ="SPRINT_ID"           property = "sprintId" />
    </resultMap>

    <select id="read" parameterType="map" resultMap="UserMapper">
        select * from USER
        where ${where}
    </select>

    <insert id="create" parameterType="test.app.sample.domain.User">
        <selectKey resultType="_long" keyProperty="key" order="BEFORE">
            select USER_SEQ.nextval from dual
        </selectKey>
        insert into USER
        (
            KEY , USERNAME , PASSWORD , FIRST_NAME , LAST_NAME , 
            EMAIL , PROJECT_ID , SPRINT_ID
        )
        values
        (
            #{key} , #{username} , #{password} , #{firstName} , #{lastName} , 
            #{email} , #{projectId} , #{sprintId}
        )
    </insert>

    <select id="getListByProjectId" parameterType="long" resultMap="UserMapper">
        select * from USER
        where PROJECT_ID = #{projectId}
    </select>
    <select id="getListBySprintId" parameterType="long" resultMap="UserMapper">
        select * from USER
        where SPRINT_ID = #{sprintId}
    </select>


    <update id="update" parameterType="test.app.sample.domain.User">
        update USER set
            KEY                                 = #{key} ,
            USERNAME                            = #{username} ,
            PASSWORD                            = #{password} ,
            FIRST_NAME                          = #{firstName} ,
            LAST_NAME                           = #{lastName} ,
            EMAIL                               = #{email} ,
            PROJECT_ID                          = #{projectId} ,
            SPRINT_ID                           = #{sprintId}
        where KEY = #{key}
    </update>

    <delete id="delete" parameterType="map">
        delete from USER
        where ${where}
    </delete>


    <!-- PROTECTED CODE -->

</mapper>